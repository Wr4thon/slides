# Kubernetes basics
15:00 21 Apr 2022
Tags: kubernetes, basics
Summary: A quick overview for kubernetes

Johannes Kolata
Backend developer, ClariLab GmbH & Co. KG
me@wr4thon.de
https://slides.wr4thon.de
@wr4thon

## Agenda

- Kubernetes quickfacts
- Why are we using Kubernetes
- What problems does Kubernetes solve?
- Terminology
- Software supply chain
// - Security
- Helpful tools for working with Kubernetes

## Kubernetes quickfacts

- Open-source platform for administrating, automating and scaling container applications
- Developed by Google in go
- Initial release 2014
- Development continued by Cloud Native Computing Foundation
- Manages containers (docker, containerd, ... )
 
: original codename for Kubernetes within Google was Project 7
: reference to the Star Trek ex-Borg character Seven of Nine
: The seven spokes on the wheel of the Kubernetes logo are a reference to that codename.
: performes healthchecks

## Why are we using Kubernetes
// https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/

- High availability 
- Scalability 
- Disaster recovery

: High availability -> No downtime, always accessible for users
: Scalability -> High performance, loads fast, users have high response recreate
: Disaster recovery -> Infrastructure has a problem, Start a new node and apply configuration

## What problems does Kubernetes solve?

- Easy deployment
- Scaling resources to needs
- Automating deployments of services
- Configuration management
- Testing different versions of applications or features

: Traditionally you had binaries run on bare metal
: Later you ran them in VMs
: Splitting applications into microservices became popular
: Deploying of microservices by hand became tedious
: Automation -> Using a build server to create images that can be run by Kubernetes

## Terminology

## Nodes

- Master (main) and worker / minion nodes
	- main nodes are the entrypoints into the cluster
	- worker nodes run the actual workloads
- A machine where containers (workloads) are deployed
- Runs an instance of kubelet
	- Reports the state of each node to the main nodes
	- Takes care of starting, stopping
	- Monitors the state of a pods
- Runs an instance of Kube-proxy
	- Network proxy
	- Load balancer

: main nodes run the API and manage the cluster (i.e. cattle, ...); Don't need much resources; REQUIRED for accessing the API, no access without!
: controller manager -> overview over the cluster (repair stuff, restart containers if needed)
: scheduler schedules workloads depending on load and resource availability
: there should be an odd number of main nodes for decision making
: runs etcd (strongly consistent, distributed key-value store) which contains the configuration. Can be snapshoted to recover the whole cluster state.
: workers execute the actual workload so they need to run a container runtime (docker, containerd ...)
: main and worker nodes talk to each other using a virtual network. Turns the whole cluster into a single powerful machine that have the sum of all nodes.

## Namespace

- Used for isolating groups of resources within a single cluster
- Deployments, Services, ... are organized into namespaces
- Intended for use in environments with many users spread across multiple teams or projects

: Names must be unique
: can't be nested
: divide resources between users (resource quota)

Example:

.code examples/namespace.yaml

## Pods

- Basic scheduling unit in Kubernetes
- Manages the containers running inside
- Restart / recreate on failure
- Shared between worker nodes

: smallest unit that users can configure and interact with
: wrapper for a container
: usually 1 pod per application, multiple containers per pod only when a pod needs a "helper" (linkerd)
: each pod hat it's own IP address (self contained server)
: new IP on recreate

## Volumes

- Mounted files inside a container
- Can be folders or files
- Mounted to a specific location inside a container

## ConfigMaps and secrets

- Contains configuration for a service
- ConfigMaps: Basically files
- Secrets: Same as ConfigMaps, but encrypted 
	- Encrypion is not out of the box
- Mounted to a specific location inside a container or as an environment variable

: For things like host names of other services, API keys, thresholds, ...
: So you don't have to rebuild an image when an IP changes
: for encrypting secrets you have to use third-party software

## Networking

## Services

- Internal
- Substitute for IP addresses
- "Network interface" for a pod
- Permanent IP Address for pods
- Load balancer between multiple instances of a pod

.code examples/service.yaml

## Ingresses

- External service

.code examples/ingress.yaml

## Software supply chain

- develop a feature on the local machine
- push code to a repository
- build server builds image and pushes it to registry
- kubernetes recognizes new image
- download and provision new image in cluster

// ## Security
// https://kubernetes.io/docs/concepts/security/

## Helpful tools for working with Kubernetes

## kubefwd

- Kubernetes port forwarding for local development.

example:

	sudo kubefwd svc -n {namespace}

.link https://github.com/txn2/kubefwd github

## kubetail

- get logs of a container or pod as they come in

example:

	kubetail -n {namespace} -c {name-of-deployment}


.link https://github.com/johanhaleby/kubetail github

## goseal

example:

	goseal file -f {path/to/unencrypted-secret.yaml} \
	-n {namespace} \
	-s {secret-name} \
	-k {key-in-secret} \
	-c {http://path/to/certificate} > {encrypted-secret}


.link https://github.com/MaxBreida/goseal github
